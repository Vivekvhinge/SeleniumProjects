# ====================================================================================================
# log4j2.properties - Example Configuration File
# ====================================================================================================
# This file configures the Apache Log4j 2 logging framework.
#
# Key Concepts:
# - Appenders: Where log messages go (e.g., console, file, database).
# - Layouts: How log messages are formatted.
# - Loggers: What to log and at what level.
# - Levels: TRACE < DEBUG < INFO < WARN < ERROR < FATAL.
# ====================================================================================================

# ------------------------------------------------------------------------------------
# 1. Global Configuration
# ------------------------------------------------------------------------------------
# Sets the root logging level. All loggers inherit from this unless overridden.
# From XML: <Root level="all">, which means TRACE.
rootLogger.level = DEBUG

# ------------------------------------------------------------------------------------
# 2. Appenders Configuration
#    Defines where and how log messages are output.
# ------------------------------------------------------------------------------------

# --- Console Appender ---
# Outputs log messages to the console (standard output).
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
# Pattern for console output, taken directly from XML:
# %d{HH:mm:ss.SSS} : Date and time up to milliseconds
# [%t]                  : Thread name
# %-5level              : Log level (e.g., INFO, ERROR) padded to 5 characters
# %logger{36}           : Logger name (e.g., com.example.MyClass) truncated to 36 characters
# - %msg%n              : The log message followed by a newline
appender.console.layout.pattern = %d{HH:mm:ss.SSS} [%t]%-5level %logger{36} - %msg%n
# Optional: Set a filter for the console appender if you only want specific levels
# appender.console.filter.threshold.type = ThresholdFilter
# appender.console.filter.threshold.level = DEBUG

# --- File Appender (Non-rolling, as per your XML) ---
# Outputs log messages to a single file. This will grow indefinitely.
# If you prefer rolling files (recommended for production), see the commented RollingFile appender below.
appender.file.type = File
appender.file.name = file
# File name directly from XML: C:\Users\Admin\eclipse-workspace\Log4j\log\app.log
appender.file.fileName = C:\Users\Admin\eclipse-workspace\Log4j\log\app.log
appender.file.layout.type = PatternLayout
# Layout pattern directly from XML
appender.file.layout.pattern = %d{HH:mm:ss.SSS} [%t]%-5level %logger{36} - %msg%n


# --- IMPORTANT: Rolling File Appender (Recommended for Production) ---
# The XML provided uses a simple 'File' appender which does not roll over.
# For production environments, it is HIGHLY recommended to use a RollingFile appender
# to prevent log files from growing indefinitely and consuming all disk space.
# I've kept the simple 'File' appender above to match your XML exactly, but
# I'm providing the RollingFile configuration commented out below for your reference.
# appender.rollingFile.type = RollingFile
# appender.rollingFile.name = ROLLING_FILE
# appender.rollingFile.fileName = logs/application.log
# appender.rollingFile.filePattern = logs/application-%d{yyyy-MM-dd}-%i.log.gz
# appender.rollingFile.layout.type = PatternLayout
# appender.rollingFile.layout.pattern = %d{HH:mm:ss.SSS} [%t]%-5level %logger{36} - %msg%n
# appender.rollingFile.policies.type = Policies
# appender.rollingFile.policies.time.type = TimeBasedTriggeringPolicy
# appender.rollingFile.policies.time.interval = 1
# appender.rollingFile.policies.time.modulate = true
# appender.rollingFile.strategy.type = DefaultRolloverStrategy
# appender.rollingFile.strategy.max = 7 # Keep a maximum of 7 compressed log files (last 7 days)


# ------------------------------------------------------------------------------------
# 3. Loggers Configuration
#    Assigns appenders to loggers and sets specific logging levels for packages/classes.
# ------------------------------------------------------------------------------------

# --- Root Logger ---
# All log messages that are not handled by a specific logger will go to the root logger.
# From XML: <Root level="all"> with <AppenderRef ref="file" />
# This means only the 'file' appender will receive root log messages.
rootLogger.appenderRef.file.ref = file
# If you want console output as well, uncomment the line below:
# rootLogger.appenderRef.stdout.ref = STDOUT

# --- Specific Logger for your application's package (example) ---
# Set a different logging level for your application's code.
# Replace 'com.yourcompany.yourapp' with your actual base package.
# This was not present in your XML, but is a common best practice.
# logger.yourApp.name = com.yourcompany.yourapp
# logger.yourApp.level = DEBUG
# logger.yourApp.additivity = false # Prevents messages from being sent to parent loggers (e.g., rootLogger) if true
# logger.yourApp.appenderRef.stdout.ref = STDOUT
# logger.yourApp.appenderRef.file.ref = FILE


# ------------------------------------------------------------------------------------
# 4. Asynchronous Logging (Optional - for high performance)
# ------------------------------------------------------------------------------------
# This section remains for reference as it was not specified in your XML.
# For better performance, especially in high-throughput applications, you can enable
# asynchronous logging. This means log events are queued and processed by a separate thread.
#
# To enable async logging for *all* loggers and appenders:
# log4j.rootLogger.Async = true
#
# Or, to make specific appenders asynchronous:
# appender.asyncConsole.type = Async
# appender.asyncConsole.name = ASYNC_STDOUT
# appender.asyncConsole.appenderRef.stdout.ref = STDOUT
# appender.asyncConsole.blocking = false # Set to false for non-blocking (faster but can drop events if queue is full)
# appender.asyncConsole.includeLocation = false # For performance, avoid location info in async

# Then, reference the async appender:
# rootLogger.appenderRef.asyncConsole.ref = ASYNC_STDOUT

# ------------------------------------------------------------------------------------
# 5. Lookups (Optional)
# ------------------------------------------------------------------------------------
# This section remains for reference as it was not specified in your XML.
# Log4j2 supports Lookups to inject dynamic values into the configuration.
# For example, to include the environment variable 'APP_ENV' in your log pattern:
# appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %-5p ${env:APP_ENV} %logger{36} - %msg%n
#
# To set system properties from the environment (e.g., for fileName):
# appender.file.fileName = logs/${sys:app.log.path}/application.log
# Then, set -Dapp.log.path=my_app_logs when running your Java app.
# ====================================================================================