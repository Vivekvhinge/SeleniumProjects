# Log4j2 Properties Configuration
# Place this file directly in your src/test/resources/ folder.
 
# Define a property for the base log directory
property.baseDir = C:/Users/Admin/eclipse-workspace/CucumberFramework/logs


# Define the appenders to use (console and file)
appenders = console, file


# Console Appender Configuration (STDOUT)
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1.} - %msg%n


# Rolling File Appender Configuration (for app.log)
# This appender will write logs to a file and roll them over (e.g., daily)
appender.file.type = RollingFile
appender.file.name = LOGFILE
# The current log file that will be written to
appender.file.fileName = ${baseDir}/app.log
# The pattern for archive files when old logs are rolled over
appender.file.filePattern = ${baseDir}/app-%d{yyyy-MM-dd}-%i.log.gz # Adds index and GZ compression
appender.file.layout.type = PatternLayout
appender.file.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1.} - %msg%n
# Define policies for rolling over logs (e.g., daily and size-based)
appender.file.policies.type = Policies
# Time-based policy: rolls over daily (interval=1)
appender.file.policies.time.type = TimeBasedTriggeringPolicy
appender.file.policies.time.interval = 1
appender.file.policies.time.modulate = true
# Size-based policy: rolls over if current log file exceeds 10MB
appender.file.policies.size.type = SizeBasedTriggeringPolicy
appender.file.policies.size.size = 10MB
# Strategy for how many old files to keep
appender.file.strategy.type = DefaultRolloverStrategy
appender.file.strategy.max = 7 # Keep up to 7 rolled-over log files


# Logger Configuration for specific classes
# Define a logger specifically for the StepDefinition.Stepdef class
loggers=StepdefLogger

# The 'name' here MUST exactly match the name used in LogManager.getLogger() in your Stepdef.java
# Your Stepdef.java uses: LogManager.getLogger("StepDefinition.Stepdef");
logger.StepdefLogger.name = StepDefinition.Stepdef
# Set the desired logging level for this logger (e.g., debug, info, warn, error, fatal)
logger.StepdefLogger.level = debug
# 'additivity="false"' is CRUCIAL here to prevent duplicate log messages in the console
# It stops logs from this logger from also being sent up to the root logger.
logger.StepdefLogger.additivity = false
# Link this logger to both the file and console appenders
logger.StepdefLogger.appenderRefs = file, console
logger.StepdefLogger.appenderRef.file.ref = LOGFILE
logger.StepdefLogger.appenderRef.console.ref = STDOUT


# Root Logger Configuration
# The root logger acts as a default for any log messages not handled by specific loggers.
# Set its level to 'off' if you only want to see logs from your explicitly configured loggers (like StepdefLogger)
# If you set it to 'info' or 'debug', it will show logs from other libraries too.
rootLogger.level = info # Setting to info to allow other framework/library logs if any
rootLogger.appenderRefs = console # Root logger primarily sends to console
rootLogger.appenderRef.console.ref = STDOUT
