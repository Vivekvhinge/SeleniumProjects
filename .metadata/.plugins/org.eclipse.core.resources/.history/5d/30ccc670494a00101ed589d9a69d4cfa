# PropertiesConfig - This is a comment at the top, not part of a property value
 
property.filename = logs

# Define the appenders.
appenders = console, file


# Console Appender Configuration
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n


# File Appender Configuration
# Changed from 'File' to 'RollingFile' for better log management (e.g., daily rollover)
appender.file.type = RollingFile
appender.file.name = LOGFILE
# Ensure this directory exists and Java process has write permissions
appender.file.fileName=C:\Users\Admin\eclipse-workspace\CucumberFramework\logs\app.log
# Set a file pattern for rolling over logs (e.g., daily)
appender.file.filePattern=C:\Users\Admin\eclipse-workspace\CucumberFramework\logs\app-%d{yyyy-MM-dd}.log
appender.file.layout.type=PatternLayout
appender.file.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n
# Define a triggering policy (e.g., daily time-based rollover)
appender.file.policies.type = Policies
appender.file.policies.time.type = TimeBasedTriggeringPolicy
appender.file.policies.time.interval = 1
appender.file.policies.time.modulate = true
# Optional: Keep a certain number of old log files
appender.file.strategy.type = DefaultRolloverStrategy
appender.file.strategy.max = 7 # Keep last 7 days of logs


# Logger Configuration for specific classes
loggers=StepdefLogger

# This logger applies to the StepDefinition.Stepdef class
# 'additivity="false"' is KEY to stop duplicates if the root logger is also configured
logger.StepdefLogger.name=StepDefinition.Stepdef
logger.StepdefLogger.level = debug
logger.StepdefLogger.additivity = false # <-- ADD THIS LINE to prevent logs from flowing to parent loggers (like root)
# Send logs for StepdefLogger to BOTH file and console.
logger.StepdefLogger.appenderRefs = file, console
logger.StepdefLogger.appenderRef.file.ref = LOGFILE
logger.StepdefLogger.appenderRef.console.ref = STDOUT


# Root Logger Configuration
# The root logger catches anything not handled by specific loggers.
# Set level to 'info' if you want other INFO/WARN/ERROR messages from libraries/frameworks.
# Set level to 'off' if you ONLY want messages from your explicitly defined loggers (e.g., StepdefLogger).
rootLogger.level = info # Changed to 'info' so general logs also appear if needed, but 'additivity=false' on StepdefLogger prevents duplication.
rootLogger.appenderRefs = console
rootLogger.appenderRef.console.ref = STDOUT
