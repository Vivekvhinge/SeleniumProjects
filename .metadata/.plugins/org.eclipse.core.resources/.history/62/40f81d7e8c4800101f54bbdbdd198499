package StepDefinition;

import org.junit.Assert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import PageObject.LoginPage;
import io.cucumber.java.en.*;
import io.github.bonigarcia.wdm.WebDriverManager;

public class Stepdef {

	public  WebDriver driver; //created webdriver object
	public LoginPage loginpg; //created login page object 



	@Given("User launch chrome browser")
	public void user_launch_chrome_browser() {

		//launch browser 
		WebDriverManager.chromedriver().setup();
		driver=new ChromeDriver();

		//intilize login page with parameter of driver cz in "login page its give as para" to run the  browser
		loginpg=new LoginPage(driver);  

	}


	@When("User open URL: {string}")
	public void user_open_url(String url) { //url will get from feature file

		driver.get(url); //calling received url 
		
		 // Add the explicit wait here to handle potential Cloudflare or page loading delays
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20)); // Max wait time
            // Wait for the Email field to be visible on the actual login page
            // This is crucial to ensure the security challenge has passed
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("Email")));
            System.out.println("Successfully navigated to login page and Email field is visible.");
        } catch (org.openqa.selenium.TimeoutException e) {
            System.err.println("Timeout waiting for Email field. Security challenge or page load issue might be present: " + e.getMessage());
            // Optionally, take a screenshot here for debugging:
            // ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
            throw new RuntimeException("Failed to load login page, Email field not visible within timeout.", e);
        }

	}

	@When("user enters email as {string} and password as {string}")
	public void user_enters_email_as_and_password_as(String emailadd, String password) { // email & pwd will get from feature file and stored in string to execute
		//with loginpg obj calling the enteremail with string parameter
		loginpg.enteremail(emailadd);

		//with loginpg obj calling the enterpassword with string parameter
		loginpg.enterpassword(password);
	}

	@When("click on login")
	public void click_on_login() {
		//with loginpg obj calling the clickloginbtn to do action
		
		try {
			Thread.sleep(4000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		loginpg.clickloginbtn();

	}

	@Then("page title should be {string}")
	public void page_title_should_be(String expectedtitle) {
		String actualtitle=driver.getTitle();

		if (actualtitle.equals(expectedtitle)) {
			Assert.assertTrue(true); //pass

		} else {
			Assert.assertTrue(false); //fail

		}


	}

	@When("user click on log out link")
	public void user_click_on_log_out_link() {
		loginpg.clicklogoutbtn();
	}

	//	@Then("Page title should be {string}")
	//	public void page_title_should_be(String string) {
	//	   
	//	}

	@Then("Close Browser")
	public void close_browser() {
		
		driver.close();
		driver.quit();

	}


}
